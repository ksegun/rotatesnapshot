version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.22 #
      # CircleCI MongoDB images available at: https://hub.docker.com/r/circleci/postgres/
      - image: circleci/mongo:4.0.0
        #environment: # environment variables for primary container
        #  POSTGRES_USER: circleci-demo-go
        #  POSTGRES_DB: circle_test
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/ksegun/rotatesnapshot

    steps: # steps that comprise the `build` job
      - setup_remote_docker

      - run:
          name: SonarQube
          command: |
            docker run --rm -it alpine sh -c "apk add curl && curl -v https://sonarqube.gravitant.net/batch/index"

      - checkout # check out source code to working directory
      - restore_cache: # restores saved cache if no changes are detected since last run
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      # Normally, this step would be in a custom primary image;
      # we've added it here for the sake of explanation.
      - run: go get ./...

      #  CircleCi's Go Docker image includes netcat
      #  This allows polling the DB port to confirm it is open before proceeding
      - run:
          name: Waiting for MongoDB to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 27017 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MongoDB && exit 1

      - run: go build

      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"
